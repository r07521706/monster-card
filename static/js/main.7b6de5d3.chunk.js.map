{"version":3,"sources":["Component/card/card.component.jsx","Component/card-list/card.list.component.jsx","Component/search-box/searchbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleOnChange","state","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchField","_this2","fetch","then","response","json","users","setState","_this3","filterMonster","filter","toLowerCase","includes","searchbox_SearchBox","e","target","value","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAEaA,SAAK,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,4BACRP,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQE,MACnBR,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQG,UCHTC,SAAW,SAACX,GAAD,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMY,SAASC,IAAI,SAAAN,GAAO,OACzBN,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,SCHzBS,eAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAYC,EAAdF,EAAcE,eAAdF,EAA6BG,MAA7B,OACvBnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACAC,UAAU,SACViB,KAAK,SACLH,YAAaA,EACbI,SAAUH,OC8BCI,cAhCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKP,MAAM,CACTR,SAAS,GACTmB,YAAY,IAJHP,mFAQM,IAAAQ,EAAAL,KACjBM,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAEL,EAAKM,SAAS,CAAC1B,SAASyB,uCAGjC,IAAAE,EAAAZ,KACAa,EAAgBb,KAAKP,MAAMR,SAAS6B,OAAO,SAAAlC,GAAO,OACtDA,EAAQE,KAAKiC,cAAcC,SAASJ,EAAKnB,MAAMW,YAAYW,iBAE7D,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACyC,EAAD,CACE1B,YAAY,iBACZC,eAAgB,SAAA0B,GAAC,OAAEN,EAAKD,SAAS,CAACP,YAAYc,EAAEC,OAAOC,SACvD3B,MAAOO,KAAKP,QAEdnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUpC,SAAU4B,YA3BVS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.7b6de5d3.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\nexport const Card=(props)=>(\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id }?set=set2&size=180x180`}/>\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './cardlist.style.css';\nexport const CardList = (props)=>(\n  <div className='card-list'>\n    {props.monsters.map(monster=>(\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport  \"./index.css\";\n\nexport const SearchBox = ({placeholder,handleOnChange,state})=>(\n  <div>\n    <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleOnChange}\n    />\n  </div>\n)\n","import React,{Component}from 'react';\nimport {CardList} from './Component/card-list/card.list.component.jsx'\nimport './App.css';\nimport {SearchBox} from './Component/search-box/searchbox.jsx'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[],\n      searchField:\"\",\n\n    };\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(users=>this.setState({monsters:users}));\n  }\n\n  render(){\n    const filterMonster = this.state.monsters.filter(monster=>\n      monster.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder='monster search'\n          handleOnChange={e=>this.setState({searchField:e.target.value})}\n          state={this.state}\n        />\n        <CardList monsters={filterMonster}>\n        </CardList>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}